import * as vscode from "vscode";
import { Output } from "../proto/gradle_pb";
import { Logger } from "../logger";
import { GradleTasksTreeDataProvider } from "../views";
import { GradleClient } from "../client";
import { Icons } from "../icons";
import { GradleTaskProvider } from "../tasks";
export interface RunTaskOpts {
    projectFolder: string;
    taskName: string;
    args?: ReadonlyArray<string>;
    input?: string;
    onOutput?: (output: Output) => void;
    showOutputColors: boolean;
    cancellationKey?: string;
}
export interface RunBuildOpts {
    projectFolder: string;
    args: ReadonlyArray<string>;
    input?: string;
    onOutput?: (output: Output) => void;
    showOutputColors: boolean;
    cancellationKey?: string;
}
export interface CancelTaskOpts {
    projectFolder?: string;
    taskName?: string;
    cancellationKey?: string;
}
export interface CancelBuildOpts {
    projectFolder?: string;
    args?: ReadonlyArray<string>;
    cancellationKey?: string;
}
export declare class Api {
    private readonly client;
    private readonly tasksTreeDataProvider;
    private readonly gradleTaskProvider;
    private readonly icons;
    constructor(client: GradleClient, tasksTreeDataProvider: GradleTasksTreeDataProvider, gradleTaskProvider: GradleTaskProvider, icons: Icons);
    onReady(callback: () => void): vscode.Disposable;
    runTask(opts: RunTaskOpts): Promise<void>;
    runBuild(opts: RunBuildOpts): Promise<void>;
    cancelRunTask(opts: CancelTaskOpts): Promise<void>;
    cancelRunBuild(opts: CancelBuildOpts): Promise<void>;
    cancelAllBuilds(): Promise<void>;
    private getRunBuildCancellationKey;
    getTasksTreeProvider(): GradleTasksTreeDataProvider;
    getTaskProvider(): GradleTaskProvider;
    getIcons(): Icons;
    getLogger(): Logger;
}

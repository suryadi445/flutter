import * as vscode from "vscode";
import { Output, GradleBuild, GradleConfig, GetDaemonsStatusReply, StopDaemonsReply, StopDaemonReply, GetProjectsReply } from "../proto/gradle_pb";
import { Logger } from "../logger";
import { GradleServer } from "../server";
import { RootProject } from "../rootProject/RootProject";
export declare class GradleClient implements vscode.Disposable {
    private readonly server;
    private readonly statusBarItem;
    private readonly clientLogger;
    private readonly connectDeadline;
    private grpcClient;
    private readonly _onDidConnect;
    private readonly _onDidConnectFail;
    readonly onDidConnect: vscode.Event<null>;
    readonly onDidConnectFail: vscode.Event<null>;
    private readonly waitForConnect;
    constructor(server: GradleServer, statusBarItem: vscode.StatusBarItem, clientLogger: Logger);
    private handleServerStop;
    handleServerStart: () => Thenable<void>;
    handleClientReady: (err: Error | undefined) => Promise<void>;
    private connectToServer;
    getBuild(rootProject: RootProject, gradleConfig: GradleConfig, showOutputColors?: boolean): Promise<GradleBuild | void>;
    getProjects(projectDir: string, gradleConfig: GradleConfig, projectName: string): Promise<GetProjectsReply | undefined>;
    runBuild(projectFolder: string, cancellationKey: string, args: ReadonlyArray<string>, input?: string, javaDebugPort?: number, task?: vscode.Task, onOutput?: (output: Output) => void, showOutputColors?: boolean, title?: string, location?: vscode.ProgressLocation): Promise<void>;
    cancelBuild(cancellationKey: string, task?: vscode.Task): Promise<void>;
    cancelBuilds(): Promise<void>;
    cancelProjects(cancellationKey: string): Promise<void>;
    getDaemonsStatus(projectFolder: string, cancelToken: vscode.CancellationToken): Promise<GetDaemonsStatusReply | void>;
    stopDaemons(projectFolder: string): Promise<StopDaemonsReply | void>;
    stopDaemon(pid: string): Promise<StopDaemonReply | void>;
    private handleRunBuildCancelled;
    private handleGetBuildCancelled;
    private handleConnectError;
    showRestartMessage(): Promise<void>;
    close(): void;
    dispose(): void;
}

import * as vscode from "vscode";
import { GradleTaskTreeItem, RootProjectTreeItem, ProjectTreeItem, NoGradleTasksTreeItem } from "..";
import { GradleTaskProvider } from "../../tasks";
import { RootProjectsStore } from "../../stores";
import { Icons } from "../../icons";
import { GradleDependencyProvider } from "../../dependencies/GradleDependencyProvider";
export declare function getGradleTaskTreeItemMap(): Map<string, GradleTaskTreeItem>;
export declare function getProjectTreeItemMap(): Map<string, ProjectTreeItem>;
export declare class GradleTasksTreeDataProvider implements vscode.TreeDataProvider<vscode.TreeItem> {
    private readonly context;
    private readonly rootProjectStore;
    private readonly gradleTaskProvider;
    private readonly gradleDependencyProvider;
    private readonly icons;
    private collapsed;
    private readonly _onDidChangeTreeData;
    readonly onDidChangeTreeData: vscode.Event<vscode.TreeItem | null>;
    constructor(context: vscode.ExtensionContext, rootProjectStore: RootProjectsStore, gradleTaskProvider: GradleTaskProvider, gradleDependencyProvider: GradleDependencyProvider, icons: Icons);
    setCollapsed(collapsed: boolean): Promise<void>;
    private buildTreeItems;
    refresh(treeItem?: vscode.TreeItem | null): void;
    getTreeItem(element: vscode.TreeItem): vscode.TreeItem;
    getParent(element: vscode.TreeItem): vscode.TreeItem | null;
    getChildren(element?: vscode.TreeItem): Promise<vscode.TreeItem[]>;
    static getChildrenForProjectTreeItem(element: ProjectTreeItem): Promise<vscode.TreeItem[]>;
    static buildItemsTreeFromTasks(tasks: vscode.Task[], rootProjectStore: RootProjectsStore, collapsed: boolean, icons: Icons): RootProjectTreeItem[] | NoGradleTasksTreeItem[];
}

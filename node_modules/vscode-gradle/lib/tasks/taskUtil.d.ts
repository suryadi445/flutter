import * as vscode from "vscode";
import { GradleProject } from "../proto/gradle_pb";
import { TaskArgs } from "../stores/types";
import { GradleTaskDefinition } from ".";
import { RootProject } from "../rootProject/RootProject";
import { GradleClient } from "../client";
import { RootProjectsStore } from "../stores";
export declare function getTaskExecution(task: vscode.Task, args?: TaskArgs): vscode.TaskExecution | undefined;
export declare function isGradleTask(task: vscode.Task): boolean;
export declare function getRunningGradleTasks(): vscode.Task[];
export declare function getRunningGradleTask(task: vscode.Task): vscode.Task | void;
export declare function isTaskRunning(task: vscode.Task, args?: TaskArgs): boolean;
export declare function cancelBuild(client: GradleClient, cancellationKey: string, task?: vscode.Task): Promise<void>;
export declare function isTaskCancelling(task: vscode.Task, args?: TaskArgs): boolean;
export declare function isTaskRestarting(task: vscode.Task, args?: TaskArgs): boolean;
export declare function hasRestartingTask(task: vscode.Task): boolean;
export declare function getCancellingTask(task: vscode.Task): vscode.Task | void;
export declare function getRestartingTask(task: vscode.Task): vscode.Task | void;
export declare function restartQueuedTask(task: vscode.Task): Promise<void>;
export declare function removeCancellingTask(task: vscode.Task): void;
export declare function queueRestartTask(client: GradleClient, task: vscode.Task): Promise<void>;
export declare function buildTaskId(projectFolder: string, script: string, project: string): string;
export declare function buildTaskName(definition: GradleTaskDefinition): string;
export declare function createTaskFromDefinition(definition: Required<GradleTaskDefinition>, rootProject: RootProject, client: GradleClient, useUniqueId?: boolean): vscode.Task;
export declare function resolveTaskFromDefinition(definition: Required<GradleTaskDefinition>, workspaceFolder: vscode.WorkspaceFolder, client: GradleClient): vscode.Task | undefined;
export declare function getVSCodeTasksFromGradleProject(rootProject: RootProject, gradleProject: GradleProject, client: GradleClient): vscode.Task[];
export declare function loadTasksForProjectRoots(client: GradleClient, rootProjects: ReadonlyArray<RootProject>): Promise<vscode.Task[]>;
export declare function runTask(rootProjectsStore: RootProjectsStore, task: vscode.Task, client: GradleClient, args?: string, debug?: boolean): Promise<void>;
export declare function runTaskWithArgs(rootProjectsStore: RootProjectsStore, task: vscode.Task, client: GradleClient, debug?: boolean): Promise<void>;
export declare function cloneTask(rootProjectsStore: RootProjectsStore, task: vscode.Task, args: string, client: GradleClient, javaDebug?: boolean, useUniqueId?: boolean): vscode.Task;
export declare function getGradleTasks(): Thenable<vscode.Task[]>;

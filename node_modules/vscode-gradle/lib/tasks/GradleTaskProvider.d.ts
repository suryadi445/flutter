import * as vscode from "vscode";
import { TaskId } from "../stores/types";
import { RootProjectsStore } from "../stores";
import { GradleClient } from "../client";
export declare class GradleTaskProvider implements vscode.TaskProvider, vscode.Disposable {
    private readonly rootProjectsStore;
    private readonly client;
    private cachedTasks;
    private readonly _onDidLoadTasks;
    private readonly _onDidStartRefresh;
    private readonly _onDidStopRefresh;
    constructor(rootProjectsStore: RootProjectsStore, client: GradleClient);
    readonly onDidLoadTasks: vscode.Event<vscode.Task[]>;
    readonly onDidStartRefresh: vscode.Event<null>;
    readonly onDidStopRefresh: vscode.Event<null>;
    private loadTasksPromise?;
    private readonly _waitForTasksLoad;
    readonly waitForTasksLoad: () => Promise<void>;
    provideTasks(): Promise<vscode.Task[] | undefined>;
    resolveTask(_task: vscode.Task): Promise<vscode.Task | undefined>;
    loadTasks(): Promise<vscode.Task[]>;
    getTasks(): vscode.Task[];
    findByTaskId(taskId: TaskId): vscode.Task | void;
    clearTasksCache(): void;
    dispose(): void;
}
